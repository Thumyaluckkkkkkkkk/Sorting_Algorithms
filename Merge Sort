import pyglet
import random

# Function to recursively divide the array
def mergesort(A, start, end):
    if end <= start:
        return

    mid = start + ((end - start + 1) // 2) - 1

    yield from mergesort(A, start, mid)
    yield from mergesort(A, mid + 1, end)
    yield from merge(A, start, mid, end)

# Function to merge the array
def merge(A, start, mid, end):
    merged = []
    leftIdx = start
    rightIdx = mid + 1

    while leftIdx <= mid and rightIdx <= end:
        if A[leftIdx] < A[rightIdx]:
            merged.append(A[leftIdx])
            leftIdx += 1
        else:
            merged.append(A[rightIdx])
            rightIdx += 1

    while leftIdx <= mid:
        merged.append(A[leftIdx])
        leftIdx += 1

    while rightIdx <= end:
        merged.append(A[rightIdx])
        rightIdx += 1

    for i in range(len(merged)):
        A[start + i] = merged[i]
        yield A

# Function to create a sorted array and return generator
def get_sorted_array(n):
    a = [i for i in range(1, n + 1)]
    random.shuffle(a)
    return mergesort(a, 0, len(a) - 1)

# Initialize pyglet window
window = pyglet.window.Window(800, 600)
batch = pyglet.graphics.Batch()

# Variables for animation
n = 150
generator = get_sorted_array(n)
bars = []

# Create rectangles for bars
for i, val in enumerate(next(generator)):
    # Change color based on value
    color_value = int((val / n) * 255)
    color = (255 - color_value, color_value, 255)
    rect = pyglet.shapes.Rectangle(i * 5, 0, 4, val * 4, color=color, batch=batch)
    bars.append(rect)

# Update function
def update(dt):
    try:
        data = next(generator)
        for rect, val in zip(bars, data):
            # Change color based on value
            color_value = int((val / n) * 255)
            color = (255 - color_value, color_value, 255)
            rect.height = val * 4
            rect.color = color
    except StopIteration:
        pyglet.clock.unschedule(update)

# Schedule update function
pyglet.clock.schedule_interval(update, 1/30)

# Draw function
@window.event
def on_draw():
    window.clear()
    batch.draw()

# Run pyglet application
pyglet.app.run()
